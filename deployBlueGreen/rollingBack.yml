- hosts: VMs
  become: true
  vars_files:
    - vars/default.yml
  handlers:
    - include: handlers/main.yml

  tasks:
    - name: ensure facts.d dir exists
      file:
        path: /etc/ansible/facts.d
        state: directory

    - name: put dummy fact to local facts dir
      lineinfile:
        dest: /etc/ansible/facts.d/dummy.fact
        line: '{ "fact": true }'
        regexp: '^{ "fact": true }'
        create: yes
        state: present

    - name: set facts about previous deployment
      set_fact:
        deployment_tag: "{{ ansible_local[app_name].prev_version }}"

    - name: do blue/green logic
      include_tasks: tasks/pre_tasks.yml
      when: app_bluegreen_enabled

    - name: cleanup dead containers workaround
      include_tasks: tasks/cleanup_dead_containers.yml
      when: app_cleanup_dead_containers

    - name: inform about ongoing deployment
      debug:
        msg:
          - "DEPLOYING {{ app_name }}!"
          - "{% if app_bluegreen_enabled %}Color of this deployment is {{ _app_next_color | upper }}.{% endif %}"
          - "Version is {{ deployment_tag }}."
      run_once: yes
      delegate_to: localhost

    - name: deploy app
      docker_container:
        name: "{{ app_name }}{% if app_bluegreen_enabled %}_{{ _app_next_color }}{% endif %}_{{ item }}"
        state: started
        ports: "{{ app_port_prefix }}{{ item }}:{{ app_port }}"
        image: "{{ app_image }}:{{ deployment_tag }}"
        command: "{{ app_command }}"
        restart_policy: unless-stopped
        etc_hosts: "{{ app_etc_hosts }}"
        log_driver: "{{ app_log_driver }}"
        log_options: "{{ app_log_options }}"
        env: "{{ app_env }}"
        volumes: "{{ app_volumes }}"
      loop: "{{ range(app_instances_count)|list }}"
      register: _app_deployment
    
    - name: detect app ports
      set_fact:
        _app_ports: "{{ _app_deployment.results | json_query('[].ansible_facts.docker_container.NetworkSettings.Ports[].*[][] ') }}"
    
    - name: perform healthcheck on deployed containers
      uri:
        url: "{{ 'http://' + item.HostIp + ':' + item.HostPort + app_healthcheck_path }}"
        method: GET
        status_code: 200
      retries: 100
      delay: 5
      register: _app_healthcheck_result
      until: _app_healthcheck_result.status == 200
      changed_when: False
      when: app_healthcheck_enabled
      with_items:
        - "{{ _app_ports }}"

    - name: generate nginx config for the application
      template:
        src: nginx.conf.j2
        dest: "/etc/nginx/conf.d/{{ app_name }}.conf"
        backup: yes
      when: app_nginx_enabled
      register: _nginx_config
      notify:
        - check nginx configuration
        - reload nginx
        - make test request to nginx
        - cleanup nginx config backups
      
    - name: flush handlers
      meta: flush_handlers
      
    - name: do blue/green logic
      include_tasks: tasks/post_tasks.yml
      when: app_bluegreen_enabled
    
    